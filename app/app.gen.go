// Package app provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package app

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	TokenScopes = "Token.Scopes"
)

// Defines values for AppHealthReportItemStatus.
const (
	Degraded  AppHealthReportItemStatus = "degraded"
	Disrupted AppHealthReportItemStatus = "disrupted"
	Healthy   AppHealthReportItemStatus = "healthy"
)

// Defines values for EnvironmentVariableType.
const (
	Certificate EnvironmentVariableType = "certificate"
	PrivateKey  EnvironmentVariableType = "private_key"
	PublicKey   EnvironmentVariableType = "public_key"
	Secret      EnvironmentVariableType = "secret"
	Variable    EnvironmentVariableType = "variable"
)

// Defines values for ErrorResponseStatus.
const (
	ErrorResponseStatusError ErrorResponseStatus = "error"
)

// Defines values for ExecuteResourceOperationRequestOperation.
const (
	Create ExecuteResourceOperationRequestOperation = "create"
	Delete ExecuteResourceOperationRequestOperation = "delete"
	Read   ExecuteResourceOperationRequestOperation = "read"
	Update ExecuteResourceOperationRequestOperation = "update"
)

// Defines values for LinksItemType.
const (
	Administration LinksItemType = "administration"
	Documentation  LinksItemType = "documentation"
	Endpoint       LinksItemType = "endpoint"
	External       LinksItemType = "external"
	Support        LinksItemType = "support"
)

// Defines values for OwnerType.
const (
	Team OwnerType = "team"
	User OwnerType = "user"
)

// Defines values for ReportResponseStatus.
const (
	ReportResponseStatusError ReportResponseStatus = "error"
	ReportResponseStatusOk    ReportResponseStatus = "ok"
)

// Defines values for StandardResponseStatus.
const (
	Error StandardResponseStatus = "error"
	Ok    StandardResponseStatus = "ok"
)

// ActionDefinition defines model for ActionDefinition.
type ActionDefinition struct {
	// Description A description of the action.
	Description *string `json:"description,omitempty"`

	// DisplayName The display name of the action.
	DisplayName *string `json:"display_name,omitempty"`

	// InputJsonSchema JSON schema defining the input for the action.
	InputJsonSchema *map[string]interface{} `json:"input_json_schema,omitempty"`

	// Name The unique name of the action.
	Name *string `json:"name,omitempty"`

	// OutputJsonSchema JSON schema defining the output for the action.
	OutputJsonSchema *map[string]interface{} `json:"output_json_schema,omitempty"`
}

// AppHealthReportItem defines model for AppHealthReportItem.
type AppHealthReportItem struct {
	// Message A message providing additional information.
	Message *string `json:"message,omitempty"`

	// Status The status of the health check.
	Status AppHealthReportItemStatus `json:"status"`

	// Type The resource type being reported.
	Type string `json:"type"`
}

// AppHealthReportItemStatus The status of the health check.
type AppHealthReportItemStatus string

// AppHealthReportRequest defines model for AppHealthReportRequest.
type AppHealthReportRequest struct {
	// AppId The unique identifier of the application.
	AppId string `json:"app_id"`

	// HealthReports Health check reports for the application.
	HealthReports []AppHealthReportItem `json:"health_reports"`

	// Version The version of the application.
	Version string `json:"version"`
}

// AppRequest defines model for AppRequest.
type AppRequest struct {
	// AppId The unique identifier of the application.
	AppId string `json:"app_id"`

	// Version The version of the application.
	Version string `json:"version"`
}

// EnvironmentVariable defines model for EnvironmentVariable.
type EnvironmentVariable struct {
	// Name The name of the environment variable.
	Name string `json:"name"`

	// Type The type of environment variable.
	Type EnvironmentVariableType `json:"type"`

	// Value The value of the environment variable.
	Value string `json:"value"`
}

// EnvironmentVariableType The type of environment variable.
type EnvironmentVariableType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error message detailing the failure.
	Error string `json:"error"`

	// Status Always "error" for this schema.
	Status ErrorResponseStatus `json:"status"`
}

// ErrorResponseStatus Always "error" for this schema.
type ErrorResponseStatus string

// ExecuteResourceActionRequest defines model for ExecuteResourceActionRequest.
type ExecuteResourceActionRequest struct {
	// Action The action to perform on the resource.
	Action string `json:"action"`

	// EnvironmentVariables The environment variables for the operation.
	EnvironmentVariables *[]EnvironmentVariable `json:"environment_variables,omitempty"`

	// Input The input parameters for the operation.
	Input *map[string]interface{} `json:"input,omitempty"`

	// Metadata Metadata associated with the resource operation.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// RequestType The type of request.
	RequestType string   `json:"request_type"`
	Resource    Resource `json:"resource"`
}

// ExecuteResourceActionResponse defines model for ExecuteResourceActionResponse.
type ExecuteResourceActionResponse struct {
	// Output The output of the action.
	Output map[string]interface{} `json:"output"`

	// ResponseType The type of response.
	ResponseType string `json:"response_type"`
}

// ExecuteResourceOperationRequest defines model for ExecuteResourceOperationRequest.
type ExecuteResourceOperationRequest struct {
	// EnvironmentVariables The environment variables for the operation.
	EnvironmentVariables *[]EnvironmentVariable `json:"environment_variables,omitempty"`

	// Input The input parameters for the operation.
	Input *map[string]interface{} `json:"input,omitempty"`

	// Metadata Metadata associated with the resource operation.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Operation The operation to perform on the resource.
	Operation ExecuteResourceOperationRequestOperation `json:"operation"`

	// RequestType The type of request.
	RequestType string   `json:"request_type"`
	Resource    Resource `json:"resource"`
}

// ExecuteResourceOperationRequestOperation The operation to perform on the resource.
type ExecuteResourceOperationRequestOperation string

// ExecuteResourceOperationResponse defines model for ExecuteResourceOperationResponse.
type ExecuteResourceOperationResponse struct {
	Resource *Resource `json:"resource,omitempty"`

	// ResponseType The type of response.
	ResponseType string `json:"response_type"`
}

// Links defines model for Links.
type Links struct {
	Links *[]LinksItem `json:"links,omitempty"`
}

// LinksItem defines model for LinksItem.
type LinksItem struct {
	// Title The title of the link.
	Title string `json:"title"`

	// Type The type of link.
	Type LinksItemType `json:"type"`

	// Url The URL of the link
	Url string `json:"url"`
}

// LinksItemType The type of link.
type LinksItemType string

// ListProjectsResponse defines model for ListProjectsResponse.
type ListProjectsResponse struct {
	// Next The next page token for pagination.
	Next string `json:"next"`

	// Projects List of projects for requested page
	Projects []Project `json:"projects"`
}

// ListRecipesResponse defines model for ListRecipesResponse.
type ListRecipesResponse struct {
	// Next The next page token for pagination.
	Next string `json:"next"`

	// Recipes List of recipes for requested page
	Recipes []Recipe `json:"recipes"`
}

// ListResourcesRequest defines model for ListResourcesRequest.
type ListResourcesRequest struct {
	// Metadata Metadata associated with the resource operation.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Next The next page token for pagination.
	Next string `json:"next"`

	// RequestType The type of request.
	RequestType string   `json:"request_type"`
	Resource    Resource `json:"resource"`
}

// ListResourcesResponse defines model for ListResourcesResponse.
type ListResourcesResponse struct {
	// Next The next page token for pagination.
	Next string `json:"next"`

	// Resources List of resources for requested page
	Resources []Resource `json:"resources"`

	// ResponseType The type of response.
	ResponseType string `json:"response_type"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	// TempestAppUrl URL of the app in the Tempest web interface.
	TempestAppUrl *string `json:"tempest_app_url,omitempty"`
}

// NextResponse defines model for NextResponse.
type NextResponse struct {
	Metadata TaskMetadata      `json:"metadata"`
	Task     NextResponse_Task `json:"task"`

	// TaskId The unique identifier of the task.
	TaskId string `json:"task_id"`
}

// NextResponse_Task defines model for NextResponse.Task.
type NextResponse_Task struct {
	union json.RawMessage
}

// Owner defines model for Owner.
type Owner struct {
	// Email The email address of the owner.
	Email string `json:"email"`

	// Name The name of the owner.
	Name string `json:"name"`

	// Type The type of owner.
	Type OwnerType `json:"type"`
}

// OwnerType The type of owner.
type OwnerType string

// Project defines model for Project.
type Project struct {
	// CreatedAt Timestamp when the project was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// FromRecipe ID of the recipe that was used to create the project.
	FromRecipe *string `json:"fromRecipe,omitempty"`

	// Id Internal identifier of the project.
	Id string `json:"id"`

	// Name The name of the project.
	Name string `json:"name"`

	// OrganizationId Organization identifier the project belongs to.
	OrganizationId string `json:"organizationId"`

	// Published Whether the project is published.
	Published *bool `json:"published,omitempty"`

	// TeamId Team identifier the project belongs to.
	TeamId *string `json:"teamId,omitempty"`

	// Type The type of the project.
	Type string `json:"type"`

	// UpdatedAt Timestamp when the project was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	// CreatedAt Timestamp when the recipe was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Internal identifier of the recipe.
	Id string `json:"id"`

	// Name The name of the recipe.
	Name string `json:"name"`

	// Public Whether the recipe is public.
	Public *bool `json:"public,omitempty"`

	// Published Whether the recipe is published.
	Published *bool `json:"published,omitempty"`

	// PublishedAt Timestamp when the recipe was published.
	PublishedAt *time.Time `json:"publishedAt"`

	// TeamId Team identifier the recipe belongs to.
	TeamId *string `json:"teamId,omitempty"`

	// Type The type of the recipe.
	Type string `json:"type"`

	// UpdatedAt Timestamp when the recipe was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ReportResponse defines model for ReportResponse.
type ReportResponse struct {
	// Message A message providing additional information.
	Message  *string                 `json:"message,omitempty"`
	Response ReportResponse_Response `json:"response"`

	// Status Status of the report operation
	Status ReportResponseStatus `json:"status"`

	// TaskId The unique identifier of the task.
	TaskId string `json:"task_id"`
}

// ReportResponse_Response defines model for ReportResponse.Response.
type ReportResponse_Response struct {
	union json.RawMessage
}

// ReportResponseStatus Status of the report operation
type ReportResponseStatus string

// RequestObjectById defines model for RequestObjectById.
type RequestObjectById struct {
	// Id The unique identifier of the object.
	Id string `json:"id"`
}

// RequestPaginatedObjects defines model for RequestPaginatedObjects.
type RequestPaginatedObjects struct {
	// Next Pagination cursor for the next page of results
	Next *string `json:"next"`
}

// Resource defines model for Resource.
type Resource struct {
	// CreatedAt Timestamp when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedBy Identifier of the user who created the resource.
	CreatedBy *string `json:"createdBy"`

	// DeletedAt Timestamp when the resource was deleted, if applicable.
	DeletedAt *time.Time `json:"deletedAt"`

	// DisplayName The display name of the resource.
	DisplayName string `json:"displayName"`

	// ExternalId The external identifier of the resource.
	ExternalId string `json:"externalId"`

	// ExternalUrl External URL where the resource can be accessed.
	ExternalUrl *string `json:"externalUrl,omitempty"`

	// Id Internal identifier of the resource.
	Id    string `json:"id"`
	Links *Links `json:"links,omitempty"`

	// Name The name of the resource.
	Name *string `json:"name"`

	// OrganizationId Identifier of the organization that owns the resource.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Properties Properties of the resource.
	Properties *map[string]interface{} `json:"properties"`

	// Status Current status of the resource.
	Status *string `json:"status,omitempty"`

	// SyncedAt Timestamp when the resource was last synced.
	SyncedAt *time.Time `json:"syncedAt,omitempty"`

	// Type The type of the resource.
	Type string `json:"type"`

	// UpdatedAt Timestamp when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ResourceDefinition defines model for ResourceDefinition.
type ResourceDefinition struct {
	// Actions Actions that can be performed on this resource.
	Actions *[]ActionDefinition `json:"actions,omitempty"`

	// CreateInputSchema JSON schema that defines the input for the create operation.
	CreateInputSchema *map[string]interface{} `json:"create_input_schema,omitempty"`

	// CreateSupported Whether the resource supports the create operation.
	CreateSupported bool `json:"create_supported"`

	// DeleteSupported Whether the resource supports the delete operation.
	DeleteSupported bool `json:"delete_supported"`

	// Description A description of the resource.
	Description string `json:"description"`

	// DisplayName The display name of the resource.
	DisplayName string `json:"display_name"`

	// HealthcheckSupported Whether the resource supports health checks.
	HealthcheckSupported bool `json:"healthcheck_supported"`

	// InstructionsMarkdown Markdown instructions for the resource.
	InstructionsMarkdown *string `json:"instructions_markdown,omitempty"`

	// LifecycleStage The lifecycle stage of this resource.
	LifecycleStage string `json:"lifecycle_stage"`
	Links          *Links `json:"links,omitempty"`

	// ListSupported Whether the resource supports the list operation.
	ListSupported bool `json:"list_supported"`

	// PropertyJsonSchema JSON schema defining properties of the resource.
	PropertyJsonSchema *map[string]interface{} `json:"property_json_schema,omitempty"`

	// ReadSupported Whether the resource supports the read operation.
	ReadSupported bool `json:"read_supported"`

	// Type The type of the resource.
	Type string `json:"type"`

	// UpdateInputSchema JSON schema that defines the input for the update operation.
	UpdateInputSchema *map[string]interface{} `json:"update_input_schema,omitempty"`

	// UpdateSupported Whether the resource supports the update operation.
	UpdateSupported bool `json:"update_supported"`
}

// StandardResponse defines model for StandardResponse.
type StandardResponse struct {
	// Error Error message if the operation fails.
	Error *string `json:"error"`

	// Message A message providing additional information.
	Message  *string   `json:"message,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// Status Status of the report operation
	Status StandardResponseStatus `json:"status"`
}

// StandardResponseStatus Status of the report operation
type StandardResponseStatus string

// TaskMetadata defines model for TaskMetadata.
type TaskMetadata struct {
	Author Owner `json:"author"`

	// Owners The owners of the task.
	Owners []Owner `json:"owners"`

	// ProjectId The unique identifier of the project.
	ProjectId string `json:"project_id"`

	// ProjectName The name of the project.
	ProjectName string `json:"project_name"`
}

// PostAppsVersionConnectJSONBody defines parameters for PostAppsVersionConnect.
type PostAppsVersionConnectJSONBody struct {
	// AppId The unique identifier of the application.
	AppId     string               `json:"app_id"`
	Resources []ResourceDefinition `json:"resources"`

	// Version The version of the application.
	Version string `json:"version"`
}

// PostAppsOperationsNextJSONRequestBody defines body for PostAppsOperationsNext for application/json ContentType.
type PostAppsOperationsNextJSONRequestBody = AppRequest

// PostAppsOperationsReportJSONRequestBody defines body for PostAppsOperationsReport for application/json ContentType.
type PostAppsOperationsReportJSONRequestBody = ReportResponse

// PostAppsVersionConnectJSONRequestBody defines body for PostAppsVersionConnect for application/json ContentType.
type PostAppsVersionConnectJSONRequestBody PostAppsVersionConnectJSONBody

// PostAppsVersionsHealthJSONRequestBody defines body for PostAppsVersionsHealth for application/json ContentType.
type PostAppsVersionsHealthJSONRequestBody = AppHealthReportRequest

// PostProjectsGetJSONRequestBody defines body for PostProjectsGet for application/json ContentType.
type PostProjectsGetJSONRequestBody = RequestObjectById

// PostProjectsListJSONRequestBody defines body for PostProjectsList for application/json ContentType.
type PostProjectsListJSONRequestBody = RequestPaginatedObjects

// PostRecipesGetJSONRequestBody defines body for PostRecipesGet for application/json ContentType.
type PostRecipesGetJSONRequestBody = RequestObjectById

// PostRecipesListJSONRequestBody defines body for PostRecipesList for application/json ContentType.
type PostRecipesListJSONRequestBody = RequestPaginatedObjects

// PostResourcesGetJSONRequestBody defines body for PostResourcesGet for application/json ContentType.
type PostResourcesGetJSONRequestBody = RequestObjectById

// PostResourcesListJSONRequestBody defines body for PostResourcesList for application/json ContentType.
type PostResourcesListJSONRequestBody = RequestPaginatedObjects

// AsExecuteResourceOperationRequest returns the union data inside the NextResponse_Task as a ExecuteResourceOperationRequest
func (t NextResponse_Task) AsExecuteResourceOperationRequest() (ExecuteResourceOperationRequest, error) {
	var body ExecuteResourceOperationRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExecuteResourceOperationRequest overwrites any union data inside the NextResponse_Task as the provided ExecuteResourceOperationRequest
func (t *NextResponse_Task) FromExecuteResourceOperationRequest(v ExecuteResourceOperationRequest) error {
	v.RequestType = "execute_resource_operation"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExecuteResourceOperationRequest performs a merge with any union data inside the NextResponse_Task, using the provided ExecuteResourceOperationRequest
func (t *NextResponse_Task) MergeExecuteResourceOperationRequest(v ExecuteResourceOperationRequest) error {
	v.RequestType = "execute_resource_operation"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExecuteResourceActionRequest returns the union data inside the NextResponse_Task as a ExecuteResourceActionRequest
func (t NextResponse_Task) AsExecuteResourceActionRequest() (ExecuteResourceActionRequest, error) {
	var body ExecuteResourceActionRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExecuteResourceActionRequest overwrites any union data inside the NextResponse_Task as the provided ExecuteResourceActionRequest
func (t *NextResponse_Task) FromExecuteResourceActionRequest(v ExecuteResourceActionRequest) error {
	v.RequestType = "execute_resource_action"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExecuteResourceActionRequest performs a merge with any union data inside the NextResponse_Task, using the provided ExecuteResourceActionRequest
func (t *NextResponse_Task) MergeExecuteResourceActionRequest(v ExecuteResourceActionRequest) error {
	v.RequestType = "execute_resource_action"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsListResourcesRequest returns the union data inside the NextResponse_Task as a ListResourcesRequest
func (t NextResponse_Task) AsListResourcesRequest() (ListResourcesRequest, error) {
	var body ListResourcesRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListResourcesRequest overwrites any union data inside the NextResponse_Task as the provided ListResourcesRequest
func (t *NextResponse_Task) FromListResourcesRequest(v ListResourcesRequest) error {
	v.RequestType = "list_resources"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListResourcesRequest performs a merge with any union data inside the NextResponse_Task, using the provided ListResourcesRequest
func (t *NextResponse_Task) MergeListResourcesRequest(v ListResourcesRequest) error {
	v.RequestType = "list_resources"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NextResponse_Task) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"request_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t NextResponse_Task) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "execute_resource_action":
		return t.AsExecuteResourceActionRequest()
	case "execute_resource_operation":
		return t.AsExecuteResourceOperationRequest()
	case "list_resources":
		return t.AsListResourcesRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t NextResponse_Task) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NextResponse_Task) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExecuteResourceOperationResponse returns the union data inside the ReportResponse_Response as a ExecuteResourceOperationResponse
func (t ReportResponse_Response) AsExecuteResourceOperationResponse() (ExecuteResourceOperationResponse, error) {
	var body ExecuteResourceOperationResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExecuteResourceOperationResponse overwrites any union data inside the ReportResponse_Response as the provided ExecuteResourceOperationResponse
func (t *ReportResponse_Response) FromExecuteResourceOperationResponse(v ExecuteResourceOperationResponse) error {
	v.ResponseType = "execute_resource_operation"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExecuteResourceOperationResponse performs a merge with any union data inside the ReportResponse_Response, using the provided ExecuteResourceOperationResponse
func (t *ReportResponse_Response) MergeExecuteResourceOperationResponse(v ExecuteResourceOperationResponse) error {
	v.ResponseType = "execute_resource_operation"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExecuteResourceActionResponse returns the union data inside the ReportResponse_Response as a ExecuteResourceActionResponse
func (t ReportResponse_Response) AsExecuteResourceActionResponse() (ExecuteResourceActionResponse, error) {
	var body ExecuteResourceActionResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExecuteResourceActionResponse overwrites any union data inside the ReportResponse_Response as the provided ExecuteResourceActionResponse
func (t *ReportResponse_Response) FromExecuteResourceActionResponse(v ExecuteResourceActionResponse) error {
	v.ResponseType = "execute_resource_action"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExecuteResourceActionResponse performs a merge with any union data inside the ReportResponse_Response, using the provided ExecuteResourceActionResponse
func (t *ReportResponse_Response) MergeExecuteResourceActionResponse(v ExecuteResourceActionResponse) error {
	v.ResponseType = "execute_resource_action"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsListResourcesResponse returns the union data inside the ReportResponse_Response as a ListResourcesResponse
func (t ReportResponse_Response) AsListResourcesResponse() (ListResourcesResponse, error) {
	var body ListResourcesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListResourcesResponse overwrites any union data inside the ReportResponse_Response as the provided ListResourcesResponse
func (t *ReportResponse_Response) FromListResourcesResponse(v ListResourcesResponse) error {
	v.ResponseType = "list_resources"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListResourcesResponse performs a merge with any union data inside the ReportResponse_Response, using the provided ListResourcesResponse
func (t *ReportResponse_Response) MergeListResourcesResponse(v ListResourcesResponse) error {
	v.ResponseType = "list_resources"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReportResponse_Response) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"response_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ReportResponse_Response) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "execute_resource_action":
		return t.AsExecuteResourceActionResponse()
	case "execute_resource_operation":
		return t.AsExecuteResourceOperationResponse()
	case "list_resources":
		return t.AsListResourcesResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ReportResponse_Response) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReportResponse_Response) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAppsOperationsNextWithBody request with any body
	PostAppsOperationsNextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppsOperationsNext(ctx context.Context, body PostAppsOperationsNextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAppsOperationsReportWithBody request with any body
	PostAppsOperationsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppsOperationsReport(ctx context.Context, body PostAppsOperationsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAppsVersionConnectWithBody request with any body
	PostAppsVersionConnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppsVersionConnect(ctx context.Context, body PostAppsVersionConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAppsVersionsHealthWithBody request with any body
	PostAppsVersionsHealthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppsVersionsHealth(ctx context.Context, body PostAppsVersionsHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsGetWithBody request with any body
	PostProjectsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsGet(ctx context.Context, body PostProjectsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsListWithBody request with any body
	PostProjectsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsList(ctx context.Context, body PostProjectsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipesGetWithBody request with any body
	PostRecipesGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipesGet(ctx context.Context, body PostRecipesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipesListWithBody request with any body
	PostRecipesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipesList(ctx context.Context, body PostRecipesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesGetWithBody request with any body
	PostResourcesGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesGet(ctx context.Context, body PostResourcesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesListWithBody request with any body
	PostResourcesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesList(ctx context.Context, body PostResourcesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAppsOperationsNextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsOperationsNextRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsOperationsNext(ctx context.Context, body PostAppsOperationsNextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsOperationsNextRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsOperationsReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsOperationsReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsOperationsReport(ctx context.Context, body PostAppsOperationsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsOperationsReportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsVersionConnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsVersionConnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsVersionConnect(ctx context.Context, body PostAppsVersionConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsVersionConnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsVersionsHealthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsVersionsHealthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppsVersionsHealth(ctx context.Context, body PostAppsVersionsHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppsVersionsHealthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsGet(ctx context.Context, body PostProjectsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsList(ctx context.Context, body PostProjectsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipesGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipesGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipesGet(ctx context.Context, body PostRecipesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipesGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipesListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipesList(ctx context.Context, body PostRecipesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipesListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesGet(ctx context.Context, body PostResourcesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesList(ctx context.Context, body PostResourcesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAppsOperationsNextRequest calls the generic PostAppsOperationsNext builder with application/json body
func NewPostAppsOperationsNextRequest(server string, body PostAppsOperationsNextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppsOperationsNextRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAppsOperationsNextRequestWithBody generates requests for PostAppsOperationsNext with any type of body
func NewPostAppsOperationsNextRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.operations.next")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAppsOperationsReportRequest calls the generic PostAppsOperationsReport builder with application/json body
func NewPostAppsOperationsReportRequest(server string, body PostAppsOperationsReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppsOperationsReportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAppsOperationsReportRequestWithBody generates requests for PostAppsOperationsReport with any type of body
func NewPostAppsOperationsReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.operations.report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAppsVersionConnectRequest calls the generic PostAppsVersionConnect builder with application/json body
func NewPostAppsVersionConnectRequest(server string, body PostAppsVersionConnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppsVersionConnectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAppsVersionConnectRequestWithBody generates requests for PostAppsVersionConnect with any type of body
func NewPostAppsVersionConnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.version.connect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAppsVersionsHealthRequest calls the generic PostAppsVersionsHealth builder with application/json body
func NewPostAppsVersionsHealthRequest(server string, body PostAppsVersionsHealthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppsVersionsHealthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAppsVersionsHealthRequestWithBody generates requests for PostAppsVersionsHealth with any type of body
func NewPostAppsVersionsHealthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.versions.health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsGetRequest calls the generic PostProjectsGet builder with application/json body
func NewPostProjectsGetRequest(server string, body PostProjectsGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsGetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectsGetRequestWithBody generates requests for PostProjectsGet with any type of body
func NewPostProjectsGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsListRequest calls the generic PostProjectsList builder with application/json body
func NewPostProjectsListRequest(server string, body PostProjectsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectsListRequestWithBody generates requests for PostProjectsList with any type of body
func NewPostProjectsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRecipesGetRequest calls the generic PostRecipesGet builder with application/json body
func NewPostRecipesGetRequest(server string, body PostRecipesGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipesGetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRecipesGetRequestWithBody generates requests for PostRecipesGet with any type of body
func NewPostRecipesGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRecipesListRequest calls the generic PostRecipesList builder with application/json body
func NewPostRecipesListRequest(server string, body PostRecipesListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipesListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRecipesListRequestWithBody generates requests for PostRecipesList with any type of body
func NewPostRecipesListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResourcesGetRequest calls the generic PostResourcesGet builder with application/json body
func NewPostResourcesGetRequest(server string, body PostResourcesGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesGetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesGetRequestWithBody generates requests for PostResourcesGet with any type of body
func NewPostResourcesGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResourcesListRequest calls the generic PostResourcesList builder with application/json body
func NewPostResourcesListRequest(server string, body PostResourcesListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesListRequestWithBody generates requests for PostResourcesList with any type of body
func NewPostResourcesListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAppsOperationsNextWithBodyWithResponse request with any body
	PostAppsOperationsNextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsOperationsNextResponse, error)

	PostAppsOperationsNextWithResponse(ctx context.Context, body PostAppsOperationsNextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsOperationsNextResponse, error)

	// PostAppsOperationsReportWithBodyWithResponse request with any body
	PostAppsOperationsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsOperationsReportResponse, error)

	PostAppsOperationsReportWithResponse(ctx context.Context, body PostAppsOperationsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsOperationsReportResponse, error)

	// PostAppsVersionConnectWithBodyWithResponse request with any body
	PostAppsVersionConnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsVersionConnectResponse, error)

	PostAppsVersionConnectWithResponse(ctx context.Context, body PostAppsVersionConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsVersionConnectResponse, error)

	// PostAppsVersionsHealthWithBodyWithResponse request with any body
	PostAppsVersionsHealthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsVersionsHealthResponse, error)

	PostAppsVersionsHealthWithResponse(ctx context.Context, body PostAppsVersionsHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsVersionsHealthResponse, error)

	// PostProjectsGetWithBodyWithResponse request with any body
	PostProjectsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsGetResponse, error)

	PostProjectsGetWithResponse(ctx context.Context, body PostProjectsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsGetResponse, error)

	// PostProjectsListWithBodyWithResponse request with any body
	PostProjectsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsListResponse, error)

	PostProjectsListWithResponse(ctx context.Context, body PostProjectsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsListResponse, error)

	// PostRecipesGetWithBodyWithResponse request with any body
	PostRecipesGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipesGetResponse, error)

	PostRecipesGetWithResponse(ctx context.Context, body PostRecipesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipesGetResponse, error)

	// PostRecipesListWithBodyWithResponse request with any body
	PostRecipesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipesListResponse, error)

	PostRecipesListWithResponse(ctx context.Context, body PostRecipesListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipesListResponse, error)

	// PostResourcesGetWithBodyWithResponse request with any body
	PostResourcesGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesGetResponse, error)

	PostResourcesGetWithResponse(ctx context.Context, body PostResourcesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesGetResponse, error)

	// PostResourcesListWithBodyWithResponse request with any body
	PostResourcesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesListResponse, error)

	PostResourcesListWithResponse(ctx context.Context, body PostResourcesListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesListResponse, error)
}

type PostAppsOperationsNextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NextResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAppsOperationsNextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppsOperationsNextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAppsOperationsReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandardResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAppsOperationsReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppsOperationsReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAppsVersionConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandardResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAppsVersionConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppsVersionConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAppsVersionsHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandardResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostAppsVersionsHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppsVersionsHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostProjectsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProjectsResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostProjectsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recipe
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostRecipesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRecipesResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostRecipesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resource
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostResourcesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResourcesResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostResourcesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAppsOperationsNextWithBodyWithResponse request with arbitrary body returning *PostAppsOperationsNextResponse
func (c *ClientWithResponses) PostAppsOperationsNextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsOperationsNextResponse, error) {
	rsp, err := c.PostAppsOperationsNextWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsOperationsNextResponse(rsp)
}

func (c *ClientWithResponses) PostAppsOperationsNextWithResponse(ctx context.Context, body PostAppsOperationsNextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsOperationsNextResponse, error) {
	rsp, err := c.PostAppsOperationsNext(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsOperationsNextResponse(rsp)
}

// PostAppsOperationsReportWithBodyWithResponse request with arbitrary body returning *PostAppsOperationsReportResponse
func (c *ClientWithResponses) PostAppsOperationsReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsOperationsReportResponse, error) {
	rsp, err := c.PostAppsOperationsReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsOperationsReportResponse(rsp)
}

func (c *ClientWithResponses) PostAppsOperationsReportWithResponse(ctx context.Context, body PostAppsOperationsReportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsOperationsReportResponse, error) {
	rsp, err := c.PostAppsOperationsReport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsOperationsReportResponse(rsp)
}

// PostAppsVersionConnectWithBodyWithResponse request with arbitrary body returning *PostAppsVersionConnectResponse
func (c *ClientWithResponses) PostAppsVersionConnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsVersionConnectResponse, error) {
	rsp, err := c.PostAppsVersionConnectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsVersionConnectResponse(rsp)
}

func (c *ClientWithResponses) PostAppsVersionConnectWithResponse(ctx context.Context, body PostAppsVersionConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsVersionConnectResponse, error) {
	rsp, err := c.PostAppsVersionConnect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsVersionConnectResponse(rsp)
}

// PostAppsVersionsHealthWithBodyWithResponse request with arbitrary body returning *PostAppsVersionsHealthResponse
func (c *ClientWithResponses) PostAppsVersionsHealthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppsVersionsHealthResponse, error) {
	rsp, err := c.PostAppsVersionsHealthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsVersionsHealthResponse(rsp)
}

func (c *ClientWithResponses) PostAppsVersionsHealthWithResponse(ctx context.Context, body PostAppsVersionsHealthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppsVersionsHealthResponse, error) {
	rsp, err := c.PostAppsVersionsHealth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppsVersionsHealthResponse(rsp)
}

// PostProjectsGetWithBodyWithResponse request with arbitrary body returning *PostProjectsGetResponse
func (c *ClientWithResponses) PostProjectsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsGetResponse, error) {
	rsp, err := c.PostProjectsGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsGetResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsGetWithResponse(ctx context.Context, body PostProjectsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsGetResponse, error) {
	rsp, err := c.PostProjectsGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsGetResponse(rsp)
}

// PostProjectsListWithBodyWithResponse request with arbitrary body returning *PostProjectsListResponse
func (c *ClientWithResponses) PostProjectsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsListResponse, error) {
	rsp, err := c.PostProjectsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsListResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsListWithResponse(ctx context.Context, body PostProjectsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsListResponse, error) {
	rsp, err := c.PostProjectsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsListResponse(rsp)
}

// PostRecipesGetWithBodyWithResponse request with arbitrary body returning *PostRecipesGetResponse
func (c *ClientWithResponses) PostRecipesGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipesGetResponse, error) {
	rsp, err := c.PostRecipesGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipesGetResponse(rsp)
}

func (c *ClientWithResponses) PostRecipesGetWithResponse(ctx context.Context, body PostRecipesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipesGetResponse, error) {
	rsp, err := c.PostRecipesGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipesGetResponse(rsp)
}

// PostRecipesListWithBodyWithResponse request with arbitrary body returning *PostRecipesListResponse
func (c *ClientWithResponses) PostRecipesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipesListResponse, error) {
	rsp, err := c.PostRecipesListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipesListResponse(rsp)
}

func (c *ClientWithResponses) PostRecipesListWithResponse(ctx context.Context, body PostRecipesListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipesListResponse, error) {
	rsp, err := c.PostRecipesList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipesListResponse(rsp)
}

// PostResourcesGetWithBodyWithResponse request with arbitrary body returning *PostResourcesGetResponse
func (c *ClientWithResponses) PostResourcesGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesGetResponse, error) {
	rsp, err := c.PostResourcesGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesGetResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesGetWithResponse(ctx context.Context, body PostResourcesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesGetResponse, error) {
	rsp, err := c.PostResourcesGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesGetResponse(rsp)
}

// PostResourcesListWithBodyWithResponse request with arbitrary body returning *PostResourcesListResponse
func (c *ClientWithResponses) PostResourcesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesListResponse, error) {
	rsp, err := c.PostResourcesListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesListResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesListWithResponse(ctx context.Context, body PostResourcesListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesListResponse, error) {
	rsp, err := c.PostResourcesList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesListResponse(rsp)
}

// ParsePostAppsOperationsNextResponse parses an HTTP response from a PostAppsOperationsNextWithResponse call
func ParsePostAppsOperationsNextResponse(rsp *http.Response) (*PostAppsOperationsNextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppsOperationsNextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NextResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAppsOperationsReportResponse parses an HTTP response from a PostAppsOperationsReportWithResponse call
func ParsePostAppsOperationsReportResponse(rsp *http.Response) (*PostAppsOperationsReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppsOperationsReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAppsVersionConnectResponse parses an HTTP response from a PostAppsVersionConnectWithResponse call
func ParsePostAppsVersionConnectResponse(rsp *http.Response) (*PostAppsVersionConnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppsVersionConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAppsVersionsHealthResponse parses an HTTP response from a PostAppsVersionsHealthWithResponse call
func ParsePostAppsVersionsHealthResponse(rsp *http.Response) (*PostAppsVersionsHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppsVersionsHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProjectsGetResponse parses an HTTP response from a PostProjectsGetWithResponse call
func ParsePostProjectsGetResponse(rsp *http.Response) (*PostProjectsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostProjectsListResponse parses an HTTP response from a PostProjectsListWithResponse call
func ParsePostProjectsListResponse(rsp *http.Response) (*PostProjectsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRecipesGetResponse parses an HTTP response from a PostRecipesGetWithResponse call
func ParsePostRecipesGetResponse(rsp *http.Response) (*PostRecipesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRecipesListResponse parses an HTTP response from a PostRecipesListWithResponse call
func ParsePostRecipesListResponse(rsp *http.Response) (*PostRecipesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRecipesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesGetResponse parses an HTTP response from a PostResourcesGetWithResponse call
func ParsePostResourcesGetResponse(rsp *http.Response) (*PostResourcesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesListResponse parses an HTTP response from a PostResourcesListWithResponse call
func ParsePostResourcesListResponse(rsp *http.Response) (*PostResourcesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the next task to execute
	// (POST /apps.operations.next)
	PostAppsOperationsNext(w http.ResponseWriter, r *http.Request)
	// Report the result of a task execution
	// (POST /apps.operations.report)
	PostAppsOperationsReport(w http.ResponseWriter, r *http.Request)
	// Connect to a specific app version
	// (POST /apps.version.connect)
	PostAppsVersionConnect(w http.ResponseWriter, r *http.Request)
	// Handles health check reports for apps
	// (POST /apps.versions.health)
	PostAppsVersionsHealth(w http.ResponseWriter, r *http.Request)
	// Get details of a project
	// (POST /projects.get)
	PostProjectsGet(w http.ResponseWriter, r *http.Request)
	// List projects
	// (POST /projects.list)
	PostProjectsList(w http.ResponseWriter, r *http.Request)
	// Get details of a recipe
	// (POST /recipes.get)
	PostRecipesGet(w http.ResponseWriter, r *http.Request)
	// List recipes
	// (POST /recipes.list)
	PostRecipesList(w http.ResponseWriter, r *http.Request)
	// Get details of a resource
	// (POST /resources.get)
	PostResourcesGet(w http.ResponseWriter, r *http.Request)
	// List resources of a specific type
	// (POST /resources.list)
	PostResourcesList(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Retrieve the next task to execute
// (POST /apps.operations.next)
func (_ Unimplemented) PostAppsOperationsNext(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Report the result of a task execution
// (POST /apps.operations.report)
func (_ Unimplemented) PostAppsOperationsReport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Connect to a specific app version
// (POST /apps.version.connect)
func (_ Unimplemented) PostAppsVersionConnect(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Handles health check reports for apps
// (POST /apps.versions.health)
func (_ Unimplemented) PostAppsVersionsHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a project
// (POST /projects.get)
func (_ Unimplemented) PostProjectsGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List projects
// (POST /projects.list)
func (_ Unimplemented) PostProjectsList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a recipe
// (POST /recipes.get)
func (_ Unimplemented) PostRecipesGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List recipes
// (POST /recipes.list)
func (_ Unimplemented) PostRecipesList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a resource
// (POST /resources.get)
func (_ Unimplemented) PostResourcesGet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List resources of a specific type
// (POST /resources.list)
func (_ Unimplemented) PostResourcesList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAppsOperationsNext operation middleware
func (siw *ServerInterfaceWrapper) PostAppsOperationsNext(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAppsOperationsNext(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAppsOperationsReport operation middleware
func (siw *ServerInterfaceWrapper) PostAppsOperationsReport(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAppsOperationsReport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAppsVersionConnect operation middleware
func (siw *ServerInterfaceWrapper) PostAppsVersionConnect(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAppsVersionConnect(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAppsVersionsHealth operation middleware
func (siw *ServerInterfaceWrapper) PostAppsVersionsHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAppsVersionsHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostProjectsGet operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsGet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostProjectsList operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRecipesGet operation middleware
func (siw *ServerInterfaceWrapper) PostRecipesGet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecipesGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRecipesList operation middleware
func (siw *ServerInterfaceWrapper) PostRecipesList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecipesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostResourcesGet operation middleware
func (siw *ServerInterfaceWrapper) PostResourcesGet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostResourcesGet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostResourcesList operation middleware
func (siw *ServerInterfaceWrapper) PostResourcesList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostResourcesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apps.operations.next", wrapper.PostAppsOperationsNext)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apps.operations.report", wrapper.PostAppsOperationsReport)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apps.version.connect", wrapper.PostAppsVersionConnect)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apps.versions.health", wrapper.PostAppsVersionsHealth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects.get", wrapper.PostProjectsGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects.list", wrapper.PostProjectsList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipes.get", wrapper.PostRecipesGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipes.list", wrapper.PostRecipesList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/resources.get", wrapper.PostResourcesGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/resources.list", wrapper.PostResourcesList)
	})

	return r
}

type PostAppsOperationsNextRequestObject struct {
	Body *PostAppsOperationsNextJSONRequestBody
}

type PostAppsOperationsNextResponseObject interface {
	VisitPostAppsOperationsNextResponse(w http.ResponseWriter) error
}

type PostAppsOperationsNext200JSONResponse NextResponse

func (response PostAppsOperationsNext200JSONResponse) VisitPostAppsOperationsNextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsOperationsNext204Response struct {
}

func (response PostAppsOperationsNext204Response) VisitPostAppsOperationsNextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostAppsOperationsNext400JSONResponse ErrorResponse

func (response PostAppsOperationsNext400JSONResponse) VisitPostAppsOperationsNextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsOperationsNext500JSONResponse ErrorResponse

func (response PostAppsOperationsNext500JSONResponse) VisitPostAppsOperationsNextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsOperationsReportRequestObject struct {
	Body *PostAppsOperationsReportJSONRequestBody
}

type PostAppsOperationsReportResponseObject interface {
	VisitPostAppsOperationsReportResponse(w http.ResponseWriter) error
}

type PostAppsOperationsReport200JSONResponse StandardResponse

func (response PostAppsOperationsReport200JSONResponse) VisitPostAppsOperationsReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsOperationsReport400JSONResponse ErrorResponse

func (response PostAppsOperationsReport400JSONResponse) VisitPostAppsOperationsReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsOperationsReport404JSONResponse ErrorResponse

func (response PostAppsOperationsReport404JSONResponse) VisitPostAppsOperationsReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsOperationsReport500JSONResponse ErrorResponse

func (response PostAppsOperationsReport500JSONResponse) VisitPostAppsOperationsReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsVersionConnectRequestObject struct {
	Body *PostAppsVersionConnectJSONRequestBody
}

type PostAppsVersionConnectResponseObject interface {
	VisitPostAppsVersionConnectResponse(w http.ResponseWriter) error
}

type PostAppsVersionConnect200JSONResponse StandardResponse

func (response PostAppsVersionConnect200JSONResponse) VisitPostAppsVersionConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsVersionConnect400JSONResponse ErrorResponse

func (response PostAppsVersionConnect400JSONResponse) VisitPostAppsVersionConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsVersionConnect500JSONResponse ErrorResponse

func (response PostAppsVersionConnect500JSONResponse) VisitPostAppsVersionConnectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsVersionsHealthRequestObject struct {
	Body *PostAppsVersionsHealthJSONRequestBody
}

type PostAppsVersionsHealthResponseObject interface {
	VisitPostAppsVersionsHealthResponse(w http.ResponseWriter) error
}

type PostAppsVersionsHealth200JSONResponse StandardResponse

func (response PostAppsVersionsHealth200JSONResponse) VisitPostAppsVersionsHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsVersionsHealth400JSONResponse ErrorResponse

func (response PostAppsVersionsHealth400JSONResponse) VisitPostAppsVersionsHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAppsVersionsHealth500JSONResponse ErrorResponse

func (response PostAppsVersionsHealth500JSONResponse) VisitPostAppsVersionsHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsGetRequestObject struct {
	Body *PostProjectsGetJSONRequestBody
}

type PostProjectsGetResponseObject interface {
	VisitPostProjectsGetResponse(w http.ResponseWriter) error
}

type PostProjectsGet200JSONResponse Project

func (response PostProjectsGet200JSONResponse) VisitPostProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsGet400JSONResponse ErrorResponse

func (response PostProjectsGet400JSONResponse) VisitPostProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsGet404JSONResponse ErrorResponse

func (response PostProjectsGet404JSONResponse) VisitPostProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsGet500JSONResponse ErrorResponse

func (response PostProjectsGet500JSONResponse) VisitPostProjectsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsListRequestObject struct {
	Body *PostProjectsListJSONRequestBody
}

type PostProjectsListResponseObject interface {
	VisitPostProjectsListResponse(w http.ResponseWriter) error
}

type PostProjectsList200JSONResponse ListProjectsResponse

func (response PostProjectsList200JSONResponse) VisitPostProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsList400JSONResponse ErrorResponse

func (response PostProjectsList400JSONResponse) VisitPostProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsList500JSONResponse ErrorResponse

func (response PostProjectsList500JSONResponse) VisitPostProjectsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesGetRequestObject struct {
	Body *PostRecipesGetJSONRequestBody
}

type PostRecipesGetResponseObject interface {
	VisitPostRecipesGetResponse(w http.ResponseWriter) error
}

type PostRecipesGet200JSONResponse Recipe

func (response PostRecipesGet200JSONResponse) VisitPostRecipesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesGet400JSONResponse ErrorResponse

func (response PostRecipesGet400JSONResponse) VisitPostRecipesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesGet404JSONResponse ErrorResponse

func (response PostRecipesGet404JSONResponse) VisitPostRecipesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesGet500JSONResponse ErrorResponse

func (response PostRecipesGet500JSONResponse) VisitPostRecipesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesListRequestObject struct {
	Body *PostRecipesListJSONRequestBody
}

type PostRecipesListResponseObject interface {
	VisitPostRecipesListResponse(w http.ResponseWriter) error
}

type PostRecipesList200JSONResponse ListRecipesResponse

func (response PostRecipesList200JSONResponse) VisitPostRecipesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesList400JSONResponse ErrorResponse

func (response PostRecipesList400JSONResponse) VisitPostRecipesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesList500JSONResponse ErrorResponse

func (response PostRecipesList500JSONResponse) VisitPostRecipesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesGetRequestObject struct {
	Body *PostResourcesGetJSONRequestBody
}

type PostResourcesGetResponseObject interface {
	VisitPostResourcesGetResponse(w http.ResponseWriter) error
}

type PostResourcesGet200JSONResponse Resource

func (response PostResourcesGet200JSONResponse) VisitPostResourcesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesGet400JSONResponse ErrorResponse

func (response PostResourcesGet400JSONResponse) VisitPostResourcesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesGet404JSONResponse ErrorResponse

func (response PostResourcesGet404JSONResponse) VisitPostResourcesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesGet500JSONResponse ErrorResponse

func (response PostResourcesGet500JSONResponse) VisitPostResourcesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesListRequestObject struct {
	Body *PostResourcesListJSONRequestBody
}

type PostResourcesListResponseObject interface {
	VisitPostResourcesListResponse(w http.ResponseWriter) error
}

type PostResourcesList200JSONResponse ListResourcesResponse

func (response PostResourcesList200JSONResponse) VisitPostResourcesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesList400JSONResponse ErrorResponse

func (response PostResourcesList400JSONResponse) VisitPostResourcesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesList500JSONResponse ErrorResponse

func (response PostResourcesList500JSONResponse) VisitPostResourcesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve the next task to execute
	// (POST /apps.operations.next)
	PostAppsOperationsNext(ctx context.Context, request PostAppsOperationsNextRequestObject) (PostAppsOperationsNextResponseObject, error)
	// Report the result of a task execution
	// (POST /apps.operations.report)
	PostAppsOperationsReport(ctx context.Context, request PostAppsOperationsReportRequestObject) (PostAppsOperationsReportResponseObject, error)
	// Connect to a specific app version
	// (POST /apps.version.connect)
	PostAppsVersionConnect(ctx context.Context, request PostAppsVersionConnectRequestObject) (PostAppsVersionConnectResponseObject, error)
	// Handles health check reports for apps
	// (POST /apps.versions.health)
	PostAppsVersionsHealth(ctx context.Context, request PostAppsVersionsHealthRequestObject) (PostAppsVersionsHealthResponseObject, error)
	// Get details of a project
	// (POST /projects.get)
	PostProjectsGet(ctx context.Context, request PostProjectsGetRequestObject) (PostProjectsGetResponseObject, error)
	// List projects
	// (POST /projects.list)
	PostProjectsList(ctx context.Context, request PostProjectsListRequestObject) (PostProjectsListResponseObject, error)
	// Get details of a recipe
	// (POST /recipes.get)
	PostRecipesGet(ctx context.Context, request PostRecipesGetRequestObject) (PostRecipesGetResponseObject, error)
	// List recipes
	// (POST /recipes.list)
	PostRecipesList(ctx context.Context, request PostRecipesListRequestObject) (PostRecipesListResponseObject, error)
	// Get details of a resource
	// (POST /resources.get)
	PostResourcesGet(ctx context.Context, request PostResourcesGetRequestObject) (PostResourcesGetResponseObject, error)
	// List resources of a specific type
	// (POST /resources.list)
	PostResourcesList(ctx context.Context, request PostResourcesListRequestObject) (PostResourcesListResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAppsOperationsNext operation middleware
func (sh *strictHandler) PostAppsOperationsNext(w http.ResponseWriter, r *http.Request) {
	var request PostAppsOperationsNextRequestObject

	var body PostAppsOperationsNextJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAppsOperationsNext(ctx, request.(PostAppsOperationsNextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAppsOperationsNext")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAppsOperationsNextResponseObject); ok {
		if err := validResponse.VisitPostAppsOperationsNextResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAppsOperationsReport operation middleware
func (sh *strictHandler) PostAppsOperationsReport(w http.ResponseWriter, r *http.Request) {
	var request PostAppsOperationsReportRequestObject

	var body PostAppsOperationsReportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAppsOperationsReport(ctx, request.(PostAppsOperationsReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAppsOperationsReport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAppsOperationsReportResponseObject); ok {
		if err := validResponse.VisitPostAppsOperationsReportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAppsVersionConnect operation middleware
func (sh *strictHandler) PostAppsVersionConnect(w http.ResponseWriter, r *http.Request) {
	var request PostAppsVersionConnectRequestObject

	var body PostAppsVersionConnectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAppsVersionConnect(ctx, request.(PostAppsVersionConnectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAppsVersionConnect")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAppsVersionConnectResponseObject); ok {
		if err := validResponse.VisitPostAppsVersionConnectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAppsVersionsHealth operation middleware
func (sh *strictHandler) PostAppsVersionsHealth(w http.ResponseWriter, r *http.Request) {
	var request PostAppsVersionsHealthRequestObject

	var body PostAppsVersionsHealthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAppsVersionsHealth(ctx, request.(PostAppsVersionsHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAppsVersionsHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAppsVersionsHealthResponseObject); ok {
		if err := validResponse.VisitPostAppsVersionsHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectsGet operation middleware
func (sh *strictHandler) PostProjectsGet(w http.ResponseWriter, r *http.Request) {
	var request PostProjectsGetRequestObject

	var body PostProjectsGetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectsGet(ctx, request.(PostProjectsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectsGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectsGetResponseObject); ok {
		if err := validResponse.VisitPostProjectsGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectsList operation middleware
func (sh *strictHandler) PostProjectsList(w http.ResponseWriter, r *http.Request) {
	var request PostProjectsListRequestObject

	var body PostProjectsListJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectsList(ctx, request.(PostProjectsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectsList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectsListResponseObject); ok {
		if err := validResponse.VisitPostProjectsListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRecipesGet operation middleware
func (sh *strictHandler) PostRecipesGet(w http.ResponseWriter, r *http.Request) {
	var request PostRecipesGetRequestObject

	var body PostRecipesGetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRecipesGet(ctx, request.(PostRecipesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRecipesGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRecipesGetResponseObject); ok {
		if err := validResponse.VisitPostRecipesGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRecipesList operation middleware
func (sh *strictHandler) PostRecipesList(w http.ResponseWriter, r *http.Request) {
	var request PostRecipesListRequestObject

	var body PostRecipesListJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRecipesList(ctx, request.(PostRecipesListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRecipesList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRecipesListResponseObject); ok {
		if err := validResponse.VisitPostRecipesListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostResourcesGet operation middleware
func (sh *strictHandler) PostResourcesGet(w http.ResponseWriter, r *http.Request) {
	var request PostResourcesGetRequestObject

	var body PostResourcesGetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesGet(ctx, request.(PostResourcesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostResourcesGetResponseObject); ok {
		if err := validResponse.VisitPostResourcesGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostResourcesList operation middleware
func (sh *strictHandler) PostResourcesList(w http.ResponseWriter, r *http.Request) {
	var request PostResourcesListRequestObject

	var body PostResourcesListJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesList(ctx, request.(PostResourcesListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostResourcesListResponseObject); ok {
		if err := validResponse.VisitPostResourcesListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

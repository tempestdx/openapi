{
  "openapi": "3.0.3",
  "info": {
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Private Apps API",
    "version": "1.0.0",
    "description": "API for Private Apps to connect to Tempest."
  },
  "servers": [
    {
      "url": "https://developer.tempestdx.com/api/v1",
      "description": "Production server"
    }
  ],
  "paths": {
    "/apps.operations.next": {
      "post": {
        "operationId": "postAppsOperationsNext",
        "summary": "Retrieve the next task to execute",
        "description": "Fetch the next available task for execution by an external client.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The next task to execute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextResponse"
                }
              }
            }
          },
          "204": {
            "description": "No tasks available"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/apps.operations.report": {
      "post": {
        "operationId": "postAppsOperationsReport",
        "summary": "Report the result of a task execution",
        "description": "Clients report task completion or failure using this endpoint.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task report received successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/apps.version.connect": {
      "post": {
        "operationId": "postAppsVersionConnect",
        "summary": "Connect to a specific app version",
        "description": "Establish a connection with a specific version of an app, defining the resource types.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "The unique identifier of the application."
                  },
                  "version": {
                    "type": "string",
                    "description": "The version of the application."
                  },
                  "resources": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ResourceDefinition"
                    }
                  }
                },
                "required": [
                  "app_id",
                  "version",
                  "resources"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully connected to the app version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/apps.versions.health": {
      "post": {
        "operationId": "postAppsVersionsHealth",
        "summary": "Handles health check reports for apps",
        "description": "Clients report health check results using this endpoint.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppHealthReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Received health check report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/resources.get": {
      "post": {
        "operationId": "getResources",
        "summary": "Get details of a resource",
        "description": "Retrieve detailed information about a specific resource.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestObjectById"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resource details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/resources.list": {
      "post": {
        "operationId": "resourceCollection",
        "summary": "List resources of a specific type",
        "description": "Retrieve a list of resources filtered by type.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPaginatedObjects"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resources retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/recipes.get": {
      "post": {
        "operationId": "getRecipe",
        "summary": "Get details of a recipe",
        "description": "Retrieve detailed information about a specific recipe.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestObjectById"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/recipes.list": {
      "post": {
        "operationId": "recipeCollection",
        "summary": "List recipes",
        "description": "Retrieve a paginated list of recipes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPaginatedObjects"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecipesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects.get": {
      "post": {
        "operationId": "getProject",
        "summary": "Get details of a project",
        "description": "Retrieve detailed information about a specific project.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestObjectById"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects.list": {
      "post": {
        "operationId": "projectCollection",
        "summary": "List projects",
        "description": "Retrieve a paginated list of projects.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPaginatedObjects"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "AppHealthReportRequest": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "The unique identifier of the application."
          },
          "version": {
            "type": "string",
            "description": "The version of the application."
          },
          "health_reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppHealthReportItem"
            },
            "description": "Health check reports for the application."
          }
        },
        "required": [
          "app_id",
          "version",
          "health_reports"
        ]
      },
      "AppHealthReportItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The resource type being reported."
          },
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "degraded",
              "disrupted"
            ],
            "description": "The status of the health check."
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information."
          }
        },
        "required": [
          "type",
          "status"
        ]
      },
      "AppRequest": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "The unique identifier of the application."
          },
          "version": {
            "type": "string",
            "description": "The version of the application."
          }
        },
        "required": [
          "app_id",
          "version"
        ]
      },
      "NextResponse": {
        "type": "object",
        "properties": {
          "task": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExecuteResourceOperationRequest"
              },
              {
                "$ref": "#/components/schemas/ExecuteResourceActionRequest"
              },
              {
                "$ref": "#/components/schemas/ListResourcesRequest"
              }
            ],
            "discriminator": {
              "propertyName": "request_type",
              "mapping": {
                "execute_resource_operation": "#/components/schemas/ExecuteResourceOperationRequest",
                "execute_resource_action": "#/components/schemas/ExecuteResourceActionRequest",
                "list_resources": "#/components/schemas/ListResourcesRequest"
              }
            }
          },
          "task_id": {
            "type": "string",
            "description": "The unique identifier of the task."
          },
          "metadata": {
            "$ref": "#/components/schemas/TaskMetadata"
          }
        },
        "required": [
          "task",
          "task_id",
          "metadata"
        ]
      },
      "TaskMetadata": {
        "type": "object",
        "properties": {
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Owner"
            },
            "description": "The owners of the task."
          },
          "author": {
            "$ref": "#/components/schemas/Owner",
            "description": "The author of the task."
          },
          "project_id": {
            "type": "string",
            "description": "The unique identifier of the project."
          },
          "project_name": {
            "type": "string",
            "description": "The name of the project."
          }
        },
        "required": [
          "owners",
          "author",
          "project_id",
          "project_name"
        ]
      },
      "Owner": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the owner."
          },
          "name": {
            "type": "string",
            "description": "The name of the owner."
          },
          "type": {
            "type": "string",
            "description": "The type of owner.",
            "enum": [
              "user",
              "team"
            ]
          }
        },
        "required": [
          "email",
          "name",
          "type"
        ]
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "response": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExecuteResourceOperationResponse"
              },
              {
                "$ref": "#/components/schemas/ExecuteResourceActionResponse"
              },
              {
                "$ref": "#/components/schemas/ListResourcesResponse"
              }
            ],
            "discriminator": {
              "propertyName": "response_type",
              "mapping": {
                "execute_resource_operation": "#/components/schemas/ExecuteResourceOperationResponse",
                "execute_resource_action": "#/components/schemas/ExecuteResourceActionResponse",
                "list_resources": "#/components/schemas/ListResourcesResponse"
              }
            }
          },
          "task_id": {
            "type": "string",
            "description": "The unique identifier of the task."
          },
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "error"
            ],
            "description": "Status of the report operation"
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information."
          }
        },
        "required": [
          "response",
          "task_id",
          "status"
        ]
      },
      "ExecuteResourceOperationRequest": {
        "type": "object",
        "properties": {
          "request_type": {
            "type": "string",
            "description": "The type of request."
          },
          "resource": {
            "$ref": "#/components/schemas/Resource",
            "description": "The resource to operate on."
          },
          "operation": {
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete",
              "read"
            ],
            "description": "The operation to perform on the resource."
          },
          "input": {
            "type": "object",
            "description": "The input parameters for the operation."
          },
          "environment_variables": {
            "type": "array",
            "description": "The environment variables for the operation.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the resource operation."
          }
        },
        "required": [
          "request_type",
          "resource",
          "operation"
        ]
      },
      "ExecuteResourceOperationResponse": {
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response."
          },
          "resource": {
            "$ref": "#/components/schemas/Resource",
            "description": "The resource that was operated on."
          }
        },
        "required": [
          "response_type",
          "resources"
        ]
      },
      "ListResourcesRequest": {
        "type": "object",
        "properties": {
          "request_type": {
            "type": "string",
            "description": "The type of request."
          },
          "resource": {
            "$ref": "#/components/schemas/Resource",
            "description": "The resource to list."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the resource operation."
          },
          "next": {
            "type": "string",
            "description": "The next page token for pagination."
          }
        },
        "required": [
          "request_type",
          "resource",
          "next"
        ]
      },
      "ListResourcesResponse": {
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response."
          },
          "resources": {
            "type": "array",
            "description": "List of resources for requested page",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "next": {
            "type": "string",
            "description": "The next page token for pagination."
          }
        },
        "required": [
          "response_type",
          "resources",
          "next"
        ]
      },
      "ExecuteResourceActionRequest": {
        "type": "object",
        "properties": {
          "request_type": {
            "type": "string",
            "description": "The type of request."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the resource operation."
          },
          "resource": {
            "$ref": "#/components/schemas/Resource",
            "description": "The resource to operate on."
          },
          "action": {
            "type": "string",
            "description": "The action to perform on the resource."
          },
          "input": {
            "type": "object",
            "description": "The input parameters for the operation."
          },
          "environment_variables": {
            "type": "array",
            "description": "The environment variables for the operation.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            }
          }
        },
        "required": [
          "request_type",
          "resource",
          "action"
        ]
      },
      "ExecuteResourceActionResponse": {
        "type": "object",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response."
          },
          "output": {
            "type": "object",
            "description": "The output of the action."
          }
        },
        "required": [
          "response_type",
          "output"
        ]
      },
      "EnvironmentVariable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the environment variable."
          },
          "value": {
            "type": "string",
            "description": "The value of the environment variable."
          },
          "type": {
            "type": "string",
            "description": "The type of environment variable.",
            "enum": [
              "variable",
              "secret",
              "certificate",
              "private_key",
              "public_key"
            ]
          }
        },
        "required": [
          "name",
          "value",
          "type"
        ]
      },
      "Resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal identifier of the resource."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the resource was created."
          },
          "createdBy": {
            "type": "string",
            "nullable": true,
            "description": "Identifier of the user who created the resource."
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the resource was deleted, if applicable."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the resource."
          },
          "externalId": {
            "type": "string",
            "description": "The external identifier of the resource."
          },
          "externalUrl": {
            "type": "string",
            "format": "uri",
            "description": "External URL where the resource can be accessed."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the resource."
          },
          "organizationId": {
            "type": "string",
            "description": "Identifier of the organization that owns the resource."
          },
          "type": {
            "type": "string",
            "description": "The type of the resource."
          },
          "status": {
            "type": "string",
            "description": "Current status of the resource."
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the resource was last synced."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the resource was last updated."
          },
          "properties": {
            "type": "object",
            "nullable": true,
            "description": "Properties of the resource."
          },
          "links": {
            "$ref": "#/components/schemas/Links",
            "nullable": true
          }
        },
        "required": [
          "id",
          "displayName",
          "externalId",
          "type"
        ]
      },
      "ResourceDefinition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the resource."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the resource."
          },
          "description": {
            "type": "string",
            "description": "A description of the resource."
          },
          "property_json_schema": {
            "type": "object",
            "description": "JSON schema defining properties of the resource."
          },
          "list_supported": {
            "type": "boolean",
            "description": "Whether the resource supports the list operation."
          },
          "read_supported": {
            "type": "boolean",
            "description": "Whether the resource supports the read operation."
          },
          "create_supported": {
            "type": "boolean",
            "description": "Whether the resource supports the create operation."
          },
          "create_input_schema": {
            "type": "object",
            "description": "JSON schema that defines the input for the create operation."
          },
          "update_supported": {
            "type": "boolean",
            "description": "Whether the resource supports the update operation."
          },
          "update_input_schema": {
            "type": "object",
            "description": "JSON schema that defines the input for the update operation."
          },
          "delete_supported": {
            "type": "boolean",
            "description": "Whether the resource supports the delete operation."
          },
          "healthcheck_supported": {
            "type": "boolean",
            "description": "Whether the resource supports health checks."
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          },
          "instructions_markdown": {
            "type": "string",
            "description": "Markdown instructions for the resource."
          },
          "lifecycle_stage": {
            "type": "string",
            "description": "The lifecycle stage of this resource."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionDefinition"
            },
            "description": "Actions that can be performed on this resource."
          }
        },
        "required": [
          "type",
          "display_name",
          "description",
          "list_supported",
          "read_supported",
          "create_supported",
          "update_supported",
          "delete_supported",
          "healthcheck_supported",
          "lifecycle_stage"
        ]
      },
      "ActionDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of the action."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the action."
          },
          "description": {
            "type": "string",
            "description": "A description of the action."
          },
          "input_json_schema": {
            "type": "object",
            "description": "JSON schema defining the input for the action."
          },
          "output_json_schema": {
            "type": "object",
            "description": "JSON schema defining the output for the action."
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "tempest_app_url": {
            "type": "string",
            "description": "URL of the app in the Tempest web interface."
          }
        }
      },
      "StandardResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "error"
            ],
            "description": "Status of the report operation"
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information."
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if the operation fails."
          }
        },
        "required": [
          "status"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "error"
            ],
            "description": "Always \"error\" for this schema."
          },
          "error": {
            "type": "string",
            "description": "Error message detailing the failure."
          }
        },
        "required": [
          "status",
          "error"
        ]
      },
      "Links": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinksItem"
            }
          }
        }
      },
      "LinksItem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the link."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the link"
          },
          "type": {
            "type": "string",
            "description": "The type of link.",
            "enum": [
              "documentation",
              "administration",
              "support",
              "endpoint",
              "external"
            ]
          }
        },
        "required": [
          "title",
          "url",
          "type"
        ]
      },
      "Recipe": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal identifier of the recipe."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the recipe was created."
          },
          "name": {
            "type": "string",
            "description": "The name of the recipe."
          },
          "public": {
            "type": "boolean",
            "description": "Whether the recipe is public."
          },
          "published": {
            "type": "boolean",
            "description": "Whether the recipe is published."
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the recipe was published."
          },
          "teamId": {
            "type": "string",
            "description": "Team identifier the recipe belongs to."
          },
          "type": {
            "type": "string",
            "description": "The type of the recipe."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the recipe was last updated."
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal identifier of the project."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the project was created."
          },
          "fromRecipe": {
            "type": "string",
            "description": "ID of the recipe that was used to create the project."
          },
          "name": {
            "type": "string",
            "description": "The name of the project."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization identifier the project belongs to."
          },
          "published": {
            "type": "boolean",
            "description": "Whether the project is published."
          },
          "teamId": {
            "type": "string",
            "description": "Team identifier the project belongs to."
          },
          "type": {
            "type": "string",
            "description": "The type of the project."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the project was last updated."
          }
        },
        "required": [
          "id",
          "name",
          "organizationId",
          "type"
        ]
      },
      "ListRecipesResponse": {
        "type": "object",
        "properties": {
          "recipes": {
            "type": "array",
            "description": "List of recipes for requested page",
            "items": {
              "$ref": "#/components/schemas/Recipe"
            }
          },
          "next": {
            "type": "string",
            "description": "The next page token for pagination."
          }
        },
        "required": [
          "recipes",
          "next"
        ]
      },
      "ListProjectsResponse": {
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "description": "List of projects for requested page",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "next": {
            "type": "string",
            "description": "The next page token for pagination."
          }
        },
        "required": [
          "projects",
          "next"
        ]
      },
      "PageInfo": {
        "type": "object",
        "properties": {
          "hasNextPage": {
            "type": "boolean",
            "description": "Indicates if there are more results after the current page."
          },
          "endCursor": {
            "type": "string",
            "nullable": true,
            "description": "Cursor to the last item in the current page."
          }
        },
        "required": [
          "hasNextPage"
        ]
      },
      "RequestObjectById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          }
        },
        "required": [
          "id"
        ]
      },
      "RequestPaginatedObjects": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "Pagination cursor for the next page of results",
            "nullable": true
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    }
  ]
}
